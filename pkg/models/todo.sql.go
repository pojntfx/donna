// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: todo.sql

package models

import (
	"context"
	"time"
)

const closeTodo = `-- name: CloseTodo :exec
update todos
set pending = false
where id = $1
    and namespace = $2
`

type CloseTodoParams struct {
	ID        int32
	Namespace string
}

func (q *Queries) CloseTodo(ctx context.Context, arg CloseTodoParams) error {
	_, err := q.db.ExecContext(ctx, closeTodo, arg.ID, arg.Namespace)
	return err
}

const createTodo = `-- name: CreateTodo :one
insert into todos (name, deadline, importance, namespace)
values ($1, $2, $3, $4)
returning id
`

type CreateTodoParams struct {
	Name       string
	Deadline   time.Time
	Importance int32
	Namespace  string
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createTodo,
		arg.Name,
		arg.Deadline,
		arg.Importance,
		arg.Namespace,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteTodo = `-- name: DeleteTodo :exec
delete from todos
where id = $1
    and namespace = $2
`

type DeleteTodoParams struct {
	ID        int32
	Namespace string
}

func (q *Queries) DeleteTodo(ctx context.Context, arg DeleteTodoParams) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, arg.ID, arg.Namespace)
	return err
}

const getDoneTodos = `-- name: GetDoneTodos :many
select id, name, deadline, importance, pending, namespace
from todos
where pending = false and namespace = $1
order by deadline desc
`

func (q *Queries) GetDoneTodos(ctx context.Context, namespace string) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getDoneTodos, namespace)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Deadline,
			&i.Importance,
			&i.Pending,
			&i.Namespace,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPendingTodos = `-- name: GetPendingTodos :many
select id, name, deadline, importance, pending, namespace
from todos
where pending = true and namespace = $1
order by deadline desc
`

func (q *Queries) GetPendingTodos(ctx context.Context, namespace string) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getPendingTodos, namespace)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Deadline,
			&i.Importance,
			&i.Pending,
			&i.Namespace,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTodo = `-- name: GetTodo :one
select id, name, deadline, importance, pending, namespace
from todos
where id = $1
    and namespace = $2
`

type GetTodoParams struct {
	ID        int32
	Namespace string
}

func (q *Queries) GetTodo(ctx context.Context, arg GetTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodo, arg.ID, arg.Namespace)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Deadline,
		&i.Importance,
		&i.Pending,
		&i.Namespace,
	)
	return i, err
}

const updateTodo = `-- name: UpdateTodo :exec
update todos
set name = $3,
    deadline = $4,
    importance = $5
where id = $1
    and namespace = $2
`

type UpdateTodoParams struct {
	ID         int32
	Namespace  string
	Name       string
	Deadline   time.Time
	Importance int32
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) error {
	_, err := q.db.ExecContext(ctx, updateTodo,
		arg.ID,
		arg.Namespace,
		arg.Name,
		arg.Deadline,
		arg.Importance,
	)
	return err
}
