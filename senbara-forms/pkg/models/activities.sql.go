// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: activities.sql

package models

import (
	"context"
	"database/sql"
	"time"
)

const createActivity = `-- name: CreateActivity :one
with contact as (
    select id
    from contacts
    where contacts.id = $1
        and namespace = $2
),
insertion as (
    insert into activities (name, date, description, contact_id)
    select $3,
        $4,
        $5,
        $1
    from contact
    where exists (
            select 1
            from contact
        )
    returning activities.id
)
select id
from insertion
`

type CreateActivityParams struct {
	ID          int32
	Namespace   string
	Name        string
	Date        time.Time
	Description string
}

func (q *Queries) CreateActivity(ctx context.Context, arg CreateActivityParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createActivity,
		arg.ID,
		arg.Namespace,
		arg.Name,
		arg.Date,
		arg.Description,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteActivitesForContact = `-- name: DeleteActivitesForContact :exec
delete from activities using contacts
where activities.contact_id = contacts.id
    and contacts.id = $1
    and contacts.namespace = $2
`

type DeleteActivitesForContactParams struct {
	ID        int32
	Namespace string
}

func (q *Queries) DeleteActivitesForContact(ctx context.Context, arg DeleteActivitesForContactParams) error {
	_, err := q.db.ExecContext(ctx, deleteActivitesForContact, arg.ID, arg.Namespace)
	return err
}

const deleteActivitiesForNamespace = `-- name: DeleteActivitiesForNamespace :exec
delete from activities using contacts
where activities.contact_id = contacts.id
    and contacts.namespace = $1
`

func (q *Queries) DeleteActivitiesForNamespace(ctx context.Context, namespace string) error {
	_, err := q.db.ExecContext(ctx, deleteActivitiesForNamespace, namespace)
	return err
}

const deleteActivity = `-- name: DeleteActivity :exec
delete from activities using contacts
where activities.id = $3
    and activities.contact_id = contacts.id
    and contacts.id = $1
    and contacts.namespace = $2
`

type DeleteActivityParams struct {
	ID        int32
	Namespace string
	ID_2      int32
}

func (q *Queries) DeleteActivity(ctx context.Context, arg DeleteActivityParams) error {
	_, err := q.db.ExecContext(ctx, deleteActivity, arg.ID, arg.Namespace, arg.ID_2)
	return err
}

const getActivities = `-- name: GetActivities :many
select activities.id,
    activities.name,
    activities.date,
    activities.description
from contacts
    right join activities on activities.contact_id = contacts.id
where contacts.id = $1
    and contacts.namespace = $2
`

type GetActivitiesParams struct {
	ID        int32
	Namespace string
}

type GetActivitiesRow struct {
	ID          int32
	Name        string
	Date        time.Time
	Description string
}

func (q *Queries) GetActivities(ctx context.Context, arg GetActivitiesParams) ([]GetActivitiesRow, error) {
	rows, err := q.db.QueryContext(ctx, getActivities, arg.ID, arg.Namespace)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetActivitiesRow
	for rows.Next() {
		var i GetActivitiesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Date,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getActivitiesExportForNamespace = `-- name: GetActivitiesExportForNamespace :many
select 'activites' as table_name,
    activities.id,
    activities.name,
    activities.date,
    activities.description,
    contacts.id as contact_id
from contacts
    right join activities on activities.contact_id = contacts.id
where contacts.namespace = $1
`

type GetActivitiesExportForNamespaceRow struct {
	TableName   string
	ID          int32
	Name        string
	Date        time.Time
	Description string
	ContactID   sql.NullInt32
}

func (q *Queries) GetActivitiesExportForNamespace(ctx context.Context, namespace string) ([]GetActivitiesExportForNamespaceRow, error) {
	rows, err := q.db.QueryContext(ctx, getActivitiesExportForNamespace, namespace)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetActivitiesExportForNamespaceRow
	for rows.Next() {
		var i GetActivitiesExportForNamespaceRow
		if err := rows.Scan(
			&i.TableName,
			&i.ID,
			&i.Name,
			&i.Date,
			&i.Description,
			&i.ContactID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getActivity = `-- name: GetActivity :one
select id, first_name, last_name, nickname, email, pronouns, namespace, birthday, address, notes
from contacts
where contacts.id = $1
    and contacts.namespace = $2
`

type GetActivityParams struct {
	ID        int32
	Namespace string
}

func (q *Queries) GetActivity(ctx context.Context, arg GetActivityParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, getActivity, arg.ID, arg.Namespace)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Nickname,
		&i.Email,
		&i.Pronouns,
		&i.Namespace,
		&i.Birthday,
		&i.Address,
		&i.Notes,
	)
	return i, err
}

const getActivityAndContact = `-- name: GetActivityAndContact :one
select activities.id as activity_id,
    activities.name,
    activities.date,
    activities.description,
    contacts.id as contact_id,
    contacts.first_name,
    contacts.last_name
from contacts
    inner join activities on activities.contact_id = contacts.id
where contacts.id = $1
    and contacts.namespace = $2
    and activities.id = $3
`

type GetActivityAndContactParams struct {
	ID        int32
	Namespace string
	ID_2      int32
}

type GetActivityAndContactRow struct {
	ActivityID  int32
	Name        string
	Date        time.Time
	Description string
	ContactID   int32
	FirstName   string
	LastName    string
}

func (q *Queries) GetActivityAndContact(ctx context.Context, arg GetActivityAndContactParams) (GetActivityAndContactRow, error) {
	row := q.db.QueryRowContext(ctx, getActivityAndContact, arg.ID, arg.Namespace, arg.ID_2)
	var i GetActivityAndContactRow
	err := row.Scan(
		&i.ActivityID,
		&i.Name,
		&i.Date,
		&i.Description,
		&i.ContactID,
		&i.FirstName,
		&i.LastName,
	)
	return i, err
}

const updateActivity = `-- name: UpdateActivity :exec
update activities
set name = $4,
    date = $5,
    description = $6
from contacts
where contacts.id = $1
    and contacts.namespace = $2
    and activities.id = $3
    and activities.contact_id = contacts.id
`

type UpdateActivityParams struct {
	ID          int32
	Namespace   string
	ID_2        int32
	Name        string
	Date        time.Time
	Description string
}

func (q *Queries) UpdateActivity(ctx context.Context, arg UpdateActivityParams) error {
	_, err := q.db.ExecContext(ctx, updateActivity,
		arg.ID,
		arg.Namespace,
		arg.ID_2,
		arg.Name,
		arg.Date,
		arg.Description,
	)
	return err
}
